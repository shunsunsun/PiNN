{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Writing an atomic neural network\n",
    "\n",
    "This notebook demonstrates the construction of a \"network\" in PiNN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os, warnings\n",
    "import tensorflow as tf\n",
    "from glob import glob\n",
    "from pinn.io import load_qm9, sparse_batch\n",
    "from pinn.layers import cell_list_nl\n",
    "from pinn.models import potential_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "filelist = glob('/home/yunqi/datasets/QM9/dsgdb9nsd/*.xyz')\n",
    "dataset = lambda: load_qm9(filelist, split={'train':8, 'test':2})\n",
    "train = lambda: dataset()['train'].repeat().shuffle(1000).apply(sparse_batch(100))\n",
    "test = lambda: dataset()['test'].repeat().apply(sparse_batch(100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Network function\n",
    "\n",
    "A network function represents a learnable function that maps structures to atomic predictions.  \n",
    "We'll build a network function from scratch to familiarize you with the structure of a network.  \n",
    "\n",
    "The following will be a neural network that takes the elements and distances of atom pairs as input,  \n",
    "and predicts pairwise energies.\n",
    "\n",
    "PS. If you are not sure about what an operation does, `sess.run(the_tensor)` to find out.\n",
    "\n",
    "\n",
    "\n",
    "Starting with the input tensors:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /home/yunqi/.miniconda/envs/pinn_env/lib/python3.7/site-packages/tensorflow/python/data/ops/dataset_ops.py:429: py_func (from tensorflow.python.ops.script_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "tf.py_func is deprecated in TF V2. Instead, use\n",
      "    tf.py_function, which takes a python function which manipulates tf eager\n",
      "    tensors instead of numpy arrays. It's easy to convert a tf eager tensor to\n",
      "    an ndarray (just call tensor.numpy()) but having access to eager tensors\n",
      "    means `tf.py_function`s can use accelerators such as GPUs as well as\n",
      "    being differentiable using a gradient tape.\n",
      "    \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'elems': <tf.Tensor 'IteratorGetNext:2' shape=(?,) dtype=int32>,\n",
       " 'coord': <tf.Tensor 'IteratorGetNext:0' shape=(?, 3) dtype=float32>,\n",
       " 'e_data': <tf.Tensor 'IteratorGetNext:1' shape=(?,) dtype=float32>,\n",
       " 'ind_1': <tf.Tensor 'IteratorGetNext:3' shape=(?, 1) dtype=int32>}"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tensors = train().make_one_shot_iterator().get_next(); tensors"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We then build the neighbor list.\n",
    "\n",
    "`cell_list_nl` is an important component of PiNN, it implements the cell lists algorithm which yields \n",
    "the neighor list of structures with linear scaling. It returns three tensors:\n",
    "`ind_2` is the indices of the i,j atoms, `dist` is the pairwise distance and `diff` is the displacement vector. \n",
    "The first dimension of the tensors is the number of pairs.\n",
    "\n",
    "Batches and periodic boundary condictions are handled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "WARNING: The TensorFlow contrib module will not be included in TensorFlow 2.0.\n",
      "For more information, please see:\n",
      "  * https://github.com/tensorflow/community/blob/master/rfcs/20180907-contrib-sunset.md\n",
      "  * https://github.com/tensorflow/addons\n",
      "If you depend on functionality not listed there, please file an issue.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'ind_2': <tf.Tensor 'cell_list_nl/concat_3:0' shape=(?, 2) dtype=int32>,\n",
       " 'dist': <tf.Tensor 'cell_list_nl/GatherNd_5:0' shape=(?,) dtype=float32>,\n",
       " 'diff': <tf.Tensor 'cell_list_nl/GatherNd_6:0' shape=(?, 3) dtype=float32>}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nl = cell_list_nl(tensors); nl"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can gather the elements of i,j for each pair using `tf.gather`.  Here we cast them into floating points so that they can be used as inputs of the neural network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<tf.Tensor 'Cast:0' shape=(?,) dtype=float32>,\n",
       " <tf.Tensor 'Cast_1:0' shape=(?,) dtype=float32>)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "elems = tensors['elems']\n",
    "natoms = tf.shape(elems)[0]\n",
    "ind_2 = nl['ind_2']\n",
    "dist = nl['dist']\n",
    "\n",
    "elem_i = tf.cast(tf.gather(elems, ind_2[:, 0]), tf.float32)\n",
    "elem_j = tf.cast(tf.gather(elems, ind_2[:, 1]), tf.float32)\n",
    "elem_i, elem_j"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take the elements of a pair and their distance as input, and output pairwise energy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-6-0e8a3406120e>:5: dense (from tensorflow.python.layers.core) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use keras.layers.dense instead.\n",
      "WARNING:tensorflow:From /home/yunqi/.miniconda/envs/pinn_env/lib/python3.7/site-packages/tensorflow/python/framework/op_def_library.py:263: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'dense_2/BiasAdd:0' shape=(?, 1) dtype=float32>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pair = tf.stack([elem_i, elem_j, dist], axis=1)\n",
    "\n",
    "nodes = pair\n",
    "for n in [16, 16]:\n",
    "    nodes = tf.layers.dense(nodes, n, activation='tanh')\n",
    "    \n",
    "# use a linear output layer to produce the energy\n",
    "e_pair = tf.layers.dense(nodes, 1, activation=None); e_pair"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The pairwise energies can be summed to atomic energies with `tf.unsorted_segment_sum`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor 'UnsortedSegmentSum:0' shape=(?, 1) dtype=float32>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "e_atom = tf.unsorted_segment_sum(e_pair, ind_2[:, 0], natoms); e_atom"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Put them together, now you have a new network function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def my_network(tensors, n_nodes=[]):\n",
    "    elems = tensors['elems']\n",
    "    natoms = tf.shape(elems)[0]\n",
    "    \n",
    "    nl = cell_list_nl(tensors)\n",
    "    ind_2 = nl['ind_2']\n",
    "    dist = nl['dist']\n",
    "    \n",
    "    elem_i = tf.cast(tf.gather(elems, ind_2[:, 0]), tf.float32)\n",
    "    elem_j = tf.cast(tf.gather(elems, ind_2[:, 1]), tf.float32)\n",
    "    pair = tf.stack([elem_i, elem_j, dist], axis=1)\n",
    "    \n",
    "    nodes = pair\n",
    "    for n in n_nodes:\n",
    "        nodes = tf.layers.dense(nodes, n, activation='tanh')\n",
    "        \n",
    "    e_pair = tf.layers.dense(nodes, 1, activation=None)\n",
    "    e_atom = tf.unsorted_segment_sum(e_pair, ind_2[:, 0], natoms)\n",
    "    return tf.squeeze(e_atom, axis=-1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training with the network\n",
    "\n",
    "Once you've got your `network_fn`, you can directly use it in the existing models.  \n",
    "Just substitute `network` with your function definition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "params={\n",
    "    'model_dir': '/tmp/my_network',\n",
    "    'network': my_network,\n",
    "    'network_params': {\n",
    "        'n_nodes':[16, 16]},\n",
    "    'model_params':{}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Using default config.\n",
      "INFO:tensorflow:Using config: {'_model_dir': '/tmp/my_network', '_tf_random_seed': None, '_save_summary_steps': 100, '_save_checkpoints_steps': None, '_save_checkpoints_secs': 600, '_session_config': allow_soft_placement: true\n",
      "graph_options {\n",
      "  rewrite_options {\n",
      "    meta_optimizer_iterations: ONE\n",
      "  }\n",
      "}\n",
      ", '_keep_checkpoint_max': 5, '_keep_checkpoint_every_n_hours': 10000, '_log_step_count_steps': 100, '_train_distribute': None, '_device_fn': None, '_protocol': None, '_eval_distribute': None, '_experimental_distribute': None, '_service': None, '_cluster_spec': <tensorflow.python.training.server_lib.ClusterSpec object at 0x7fcddb384150>, '_task_type': 'worker', '_task_id': 0, '_global_id_in_cluster': 0, '_master': '', '_evaluation_master': '', '_is_chief': True, '_num_ps_replicas': 0, '_num_worker_replicas': 1}\n",
      "INFO:tensorflow:Not using Distribute Coordinator.\n",
      "INFO:tensorflow:Running training and evaluation locally (non-distributed).\n",
      "INFO:tensorflow:Start train and evaluate loop. The evaluate will happen after every checkpoint. Checkpoint frequency is determined based on RunConfig arguments: save_checkpoints_steps None or save_checkpoints_secs 600.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "Total number of trainable variables: 353\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Create CheckpointSaverHook.\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Saving checkpoints for 0 into /tmp/my_network/model.ckpt.\n",
      "INFO:tensorflow:loss = 346152.0, step = 1\n",
      "INFO:tensorflow:global_step/sec: 9.72204\n",
      "INFO:tensorflow:loss = 40745.125, step = 101 (10.289 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.65198\n",
      "INFO:tensorflow:loss = 19949.152, step = 201 (10.360 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.44661\n",
      "INFO:tensorflow:loss = 14702.94, step = 301 (10.588 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.58072\n",
      "INFO:tensorflow:loss = 9526.419, step = 401 (10.438 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.54791\n",
      "INFO:tensorflow:loss = 3616.6038, step = 501 (10.474 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.2748\n",
      "INFO:tensorflow:loss = 1968.7462, step = 601 (10.779 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.42503\n",
      "INFO:tensorflow:loss = 2020.4435, step = 701 (10.612 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.53732\n",
      "INFO:tensorflow:loss = 2231.4812, step = 801 (10.483 sec)\n",
      "INFO:tensorflow:global_step/sec: 9.45915\n",
      "INFO:tensorflow:loss = 1619.0415, step = 901 (10.573 sec)\n",
      "INFO:tensorflow:Saving checkpoints for 1000 into /tmp/my_network/model.ckpt.\n",
      "INFO:tensorflow:Calling model_fn.\n",
      "WARNING:tensorflow:From /home/yunqi/.miniconda/envs/pinn_env/lib/python3.7/site-packages/tensorflow/python/ops/metrics_impl.py:363: to_float (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "INFO:tensorflow:Done calling model_fn.\n",
      "INFO:tensorflow:Starting evaluation at 2019-09-30T22:43:41Z\n",
      "INFO:tensorflow:Graph was finalized.\n",
      "WARNING:tensorflow:From /home/yunqi/.miniconda/envs/pinn_env/lib/python3.7/site-packages/tensorflow/python/training/saver.py:1266: checkpoint_exists (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use standard file APIs to check for files with this prefix.\n",
      "INFO:tensorflow:Restoring parameters from /tmp/my_network/model.ckpt-1000\n",
      "INFO:tensorflow:Running local_init_op.\n",
      "INFO:tensorflow:Done running local_init_op.\n",
      "INFO:tensorflow:Evaluation [10/100]\n",
      "INFO:tensorflow:Evaluation [20/100]\n",
      "INFO:tensorflow:Evaluation [30/100]\n",
      "INFO:tensorflow:Evaluation [40/100]\n",
      "INFO:tensorflow:Evaluation [50/100]\n",
      "INFO:tensorflow:Evaluation [60/100]\n",
      "INFO:tensorflow:Evaluation [70/100]\n",
      "INFO:tensorflow:Evaluation [80/100]\n",
      "INFO:tensorflow:Evaluation [90/100]\n",
      "INFO:tensorflow:Evaluation [100/100]\n",
      "INFO:tensorflow:Finished evaluation at 2019-09-30-22:43:53\n",
      "INFO:tensorflow:Saving dict for global step 1000: METRICS/E_LOSS = 1788.0197, METRICS/E_MAE = 32.56714, METRICS/E_RMSE = 42.28498, METRICS/TOT_LOSS = 1788.0195, global_step = 1000, loss = 1788.0195\n",
      "INFO:tensorflow:Saving 'checkpoint_path' summary for global step 1000: /tmp/my_network/model.ckpt-1000\n",
      "INFO:tensorflow:Loss for final step: 1588.4066.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "({'METRICS/E_LOSS': 1788.0197,\n",
       "  'METRICS/E_MAE': 32.56714,\n",
       "  'METRICS/E_RMSE': 42.28498,\n",
       "  'METRICS/TOT_LOSS': 1788.0195,\n",
       "  'loss': 1788.0195,\n",
       "  'global_step': 1000},\n",
       " [])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = potential_model(params)\n",
    "train_spec = tf.estimator.TrainSpec(input_fn=train, max_steps=1000)\n",
    "eval_spec = tf.estimator.EvalSpec(input_fn=test, steps=100)\n",
    "tf.estimator.train_and_evaluate(model, train_spec, eval_spec)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
